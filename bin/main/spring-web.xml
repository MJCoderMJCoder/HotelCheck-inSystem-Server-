<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 配置SpringMVC -->

	<!-- 1.开启SpringMVC注解模式 -->
	<!-- 简化配置： (1)自动注册DefaultAnootationHandlerMapping,AnotationMethodHandlerAdapter 
		(2)提供一些列：数据绑定，数字和日期的format @NumberFormat, @DateTimeFormat, xml,json默认读写支持 -->

	<!--注解映射器（可省） -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"></bean> -->
	<!--配置适配器（不需时可省）。启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		在业务方法的返回值和权限之间使用@ResponseBody注解表示返回值对象需要转成JSON文本 <property name="messageConverters"> 
		<list> <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" 
		/> <ref bean="mappingJackson2HttpMessageConverter" /> </list> </property> 
		</bean> -->
	<!-- 注解驱动：以使得访问路径与方法的匹配可以通过注解配置 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
			<bean id="mappingJackson2HttpMessageConverter"
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>text/json;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 2.静态资源默认servlet配置 (1)加入对静态资源的处理：html,css,js,image等可以访问 (2)允许使用"/"做整体映射 -->
	<!-- 当在web.xml 中 DispatcherServlet使用 <url-pattern>/</url-pattern> 映射时，能映射静态资源 -->
	<mvc:default-servlet-handler />

	<!-- 3.配置jsp 显示ViewResolver。配置视图解析器。对模型视图添加前后缀 。定义跳转的文件的前后缀。 -->
	<bean id="jspViewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="order" value="0" />
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 4.扫描web相关的controller。开启Springioc自动扫描注解包。use-default-filters="false"> -->
	<context:component-scan base-package="com.lzf.web">
		<!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" 
			/> -->
	</context:component-scan>

	<!-- 内容协商管理器 -->
	<!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="favorPathExtension" value="true" />
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="true" />
		<property name="parameterName" value="format" />
		<!-- 是否忽略Accept Header -->
		<property name="ignoreAcceptHeader" value="false" />
		<property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用 -->
			<value>
				json=application/json
				xml=application/xml
				html=text/html
			</value>
		</property>
		<!-- 默认的content type -->
		<property name="defaultContentType" value="text/html" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

</beans>